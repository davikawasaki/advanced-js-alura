{"version":3,"sources":["../../app-es6/dao/NegotiationDAO.js"],"names":["NegotiationDAO","connection","_connection","_store","negotiation","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","error","e","target","negotiations","cursor","openCursor","pointer","result","data","value","push","Negotiation","_date","_quantity","_value","continue","clear"],"mappings":";;;;;;AAAA;;IAEMA,c;AAEF,4BAAYC,UAAZ,EAAwB;AAAA;;AACpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,cAAd;AACH;;;;4BAEGC,W,EAAa;AAAA;;AACb,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,MAAKN;AACf;AADU,iBAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEkB,WAFlB;AAGV;AAHU,iBAITO,WAJS,CAIG,MAAKP,MAJR;AAKV;AALU,iBAMTQ,GANS,CAMLP,WANK,CAAd;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAI,wBAAQI,SAAR,GAAoB,aAAK;AACrB;AACAN;AACH,iBAHD;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,2BAAO,wCAAP;AACH,iBAHD;AAIH,aA3BM,CAAP;AA4BH;;;kCAES;AAAA;;AACN,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIW,eAAe,EAAnB;;AAEA,oBAAIC,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKAD,uBAAOP,SAAP,GAAmB,aAAK;AACpB;AACA,wBAAIS,UAAUL,EAAEC,MAAF,CAASK,MAAvB;;AAEA,wBAAGD,OAAH,EAAY;AACR,4BAAIE,OAAOF,QAAQG,KAAnB;AACAN,qCAAaO,IAAb,CAAkB,IAAIC,WAAJ,CAAgBH,KAAKI,KAArB,EAA4BJ,KAAKK,SAAjC,EAA4CL,KAAKM,MAAjD,CAAlB;AACAR,gCAAQS,QAAR;AACH,qBAJD,MAIOxB,QAAQY,YAAR;AACV,iBATD;AAUAC,uBAAON,OAAP,GAAiB,aAAK;AAClBC,4BAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,2BAAO,yCAAP;AACH,iBAHD;AAIH,aAvBM,CAAP;AAwBH;;;oCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,QAAQ,oCAAR,CAAL;AAAA,iBAApB;AACAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,2BAAO,0CAAP;AACH,iBAHD;AAIH,aAXM,CAAP;AAYH","file":"NegotiationDAO.js","sourcesContent":["// Data Access Object: API persistence layer for IndexedDB\n\nclass NegotiationDAO {\n\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negotiations';\n    }\n\n    add(negotiation) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                // First, get transaction to an object store\n                .transaction([this._store], 'readwrite')\n                // Second, get access to a transactional store through a transaction\n                .objectStore(this._store)\n                // Do an addition request, checking for success or error\n                .add(negotiation);\n\n            // Rollback a transaction, which will redirect an error on request.\n            // Abort method needs to be executed through a transaction instance.\n            // transaction.abort();\n\n            // An aborted transaction can be treated through onabort event\n            // transaction.onabort = e => {\n            //     console.log(e);\n            //     console.log('Transação abortada');\n            // };\n\n            request.onsuccess = e => {\n                // console.log('Negociação incluída com sucesso!');\n                resolve();\n            };\n            request.onerror = e => {\n                console.error(e.target.error);\n                reject('Não foi possível incluir a negociação!');\n            };\n        });\n    }\n\n    listAll() {\n        return new Promise((resolve, reject) => {\n            \n            let negotiations = [];\n            \n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n            \n            cursor.onsuccess = e => {\n                // Actual pointer\n                let pointer = e.target.result;\n\n                if(pointer) {\n                    let data = pointer.value;\n                    negotiations.push(new Negotiation(data._date, data._quantity, data._value));\n                    pointer.continue();\n                } else resolve(negotiations);\n            };\n            cursor.onerror = e => {\n                console.error(e.target.error);\n                reject('Não foi possível listar as negociações!');\n            };\n        });\n    }\n\n    deleteAll() {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve('Negociações removidas com sucesso!');\n            request.onerror = e => {\n                console.error(e.target.error);\n                reject('Não foi possível remover as negociações!');\n            };\n        })\n    }\n\n}"]}