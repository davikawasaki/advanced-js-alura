{"version":3,"sources":["../../app-es6/dao/NegotiationDAO.js"],"names":["Negotiation","NegotiationDAO","connection","_connection","_store","negotiation","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","error","e","target","negotiations","cursor","openCursor","pointer","result","data","value","push","_date","_quantity","_value","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,uB,sBAAAA,W;;;;;;;;;;;;;;;;;;;;;sCAGKC,c;AAET,wCAAYC,UAAZ,EAAwB;AAAA;;AACpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,cAAd;AACH;;;;wCAEGC,W,EAAa;AAAA;;AACb,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,MAAKN;AACf;AADU,6BAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEkB,WAFlB;AAGV;AAHU,6BAITO,WAJS,CAIG,MAAKP,MAJR;AAKV;AALU,6BAMTQ,GANS,CAMLP,WANK,CAAd;;AAQA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEAI,oCAAQI,SAAR,GAAoB,aAAK;AACrB;AACAN;AACH,6BAHD;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBA3BM,CAAP;AA4BH;;;8CAES;AAAA;;AACN,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIW,eAAe,EAAnB;;AAEA,gCAAIC,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKAD,mCAAOP,SAAP,GAAmB,aAAK;AACpB;AACA,oCAAIS,UAAUL,EAAEC,MAAF,CAASK,MAAvB;;AAEA,oCAAGD,OAAH,EAAY;AACR,wCAAIE,OAAOF,QAAQG,KAAnB;AACAN,iDAAaO,IAAb,CAAkB,IAAI1B,WAAJ,CAAgBwB,KAAKG,KAArB,EAA4BH,KAAKI,SAAjC,EAA4CJ,KAAKK,MAAjD,CAAlB;AACAP,4CAAQQ,QAAR;AACH,iCAJD,MAIOvB,QAAQY,YAAR;AACV,6BATD;AAUAC,mCAAON,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;gDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT2B,KAHS,EAAd;;AAKAtB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,oCAAR,CAAL;AAAA,6BAApB;AACAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,KAAR,CAAcC,EAAEC,MAAF,CAASF,KAAvB;AACAR,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAXM,CAAP;AAYH","file":"NegotiationDAO.js","sourcesContent":["import {Negotiation} from '../models/Negotiation';\n\n// Data Access Object: API persistence layer for IndexedDB\nexport class NegotiationDAO {\n\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negotiations';\n    }\n\n    add(negotiation) {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                // First, get transaction to an object store\n                .transaction([this._store], 'readwrite')\n                // Second, get access to a transactional store through a transaction\n                .objectStore(this._store)\n                // Do an addition request, checking for success or error\n                .add(negotiation);\n\n            // Rollback a transaction, which will redirect an error on request.\n            // Abort method needs to be executed through a transaction instance.\n            // transaction.abort();\n\n            // An aborted transaction can be treated through onabort event\n            // transaction.onabort = e => {\n            //     console.log(e);\n            //     console.log('Transação abortada');\n            // };\n\n            request.onsuccess = e => {\n                // console.log('Negociação incluída com sucesso!');\n                resolve();\n            };\n            request.onerror = e => {\n                console.error(e.target.error);\n                reject('Não foi possível incluir a negociação!');\n            };\n        });\n    }\n\n    listAll() {\n        return new Promise((resolve, reject) => {\n            \n            let negotiations = [];\n            \n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n            \n            cursor.onsuccess = e => {\n                // Actual pointer\n                let pointer = e.target.result;\n\n                if(pointer) {\n                    let data = pointer.value;\n                    negotiations.push(new Negotiation(data._date, data._quantity, data._value));\n                    pointer.continue();\n                } else resolve(negotiations);\n            };\n            cursor.onerror = e => {\n                console.error(e.target.error);\n                reject('Não foi possível listar as negociações!');\n            };\n        });\n    }\n\n    deleteAll() {\n        return new Promise((resolve, reject) => {\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n\n            request.onsuccess = e => resolve('Negociações removidas com sucesso!');\n            request.onerror = e => {\n                console.error(e.target.error);\n                reject('Não foi possível remover as negociações!');\n            };\n        })\n    }\n\n}"]}