{"version":3,"sources":["../../app-es6/controllers/NegotiationCtrl.js"],"names":["NegotiationCtrl","$","document","querySelector","bind","_inputDate","_inputQuantity","_inputValue","_actualOrder","_negotiationList","Bind","NegotiationList","NegotiationView","_message","Message","MessageView","_service","NegotiationService","_init","ConnectionFactory","getConnection","then","NegotiationDAO","connection","negotiationDAO","listAll","negotiations","forEach","add","negotiation","catch","console","error","err","text","setInterval","import","event","preventDefault","_createNegotiation","_clearForm","empty","message","column","reverse","order","a","b","Negotiation","DateHelper","txt2date","value","parseInt","parseFloat","focus"],"mappings":"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","file":"NegotiationCtrl.js","sourcesContent":["class NegotiationCtrl {\n\n    constructor() {\n        // Maintain binding association with document to dollar sign\n        let $ = document.querySelector.bind(document);\n        this._inputDate = $('#data');\n        this._inputQuantity = $('#quantidade');\n        this._inputValue = $('#valor');\n        this._actualOrder = '';\n\n        // OBSERVER PATTERN\n        // @see: https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\n        // Instance of negotiationList passing negotiationView update as anonymous fn\n        // Case 1. Passes this context as params (needs reflection)\n        // this._negotiationList = new NegotiationList(this, function(model) {\n        // Case 2. Passing just model as params (arrow function context is lexical, not dynamic)\n\n        /* this._negotiationList = new NegotiationList(model => \n            this._negotiationView.update(model)\n        ); */\n\n        // PROXY PATTERN\n        // @see: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n        // Encapsulates the real object to be manipulated. Acts like an interface between the real object and the rest of the code.\n        // It's possible to attach codes beside ones from models, which needs to be executed in updates.\n        /* let self = this;\n        this._negotiationList = new Proxy(new NegotiationList(), {\n            get(target, prop, receiver) {\n                // Alternative: intercepting methods\n                if(['add', 'empty'].includes(prop) && typeof(target[prop]) == typeof(Function)) {\n                    // Changing object function on proxy with a new function, letting the original one intact\n                    // Scope needs to be dynamic\n                    return function() {\n                        console.log(`Intercepting method ${prop}`);\n                        // Calling the original object method from target with arguments passed within his own scope\n                        // Arguments is a implicit variable with access to method args when the method is called\n                        Reflect.apply(target[prop], target, arguments);\n\n                        // Update view with controller scope and model, which is target\n                        // JS method execution order: first get method reference, then apply it with params\n                        self._negotiationView.update(target);\n                    }\n                }\n\n                // Return property value of target\n                return Reflect.get(target, prop, receiver);\n            }\n        }); */\n\n        // FACTORY PATTERN\n        // @see: http://robdodson.me/javascript-design-patterns-factory/\n        // Binding between model and view\n        \n        // Unidirectional data-binding\n        // this._negotiationList = ProxyFactory.create(new NegotiationList,\n        //     ['add', 'empty'],\n        //     model => this._negotiationView.update(model));\n        // this._negotiationView = new NegotiationView($('#negotiationView'));\n        // this._negotiationView.update(this._negotiationList);\n        \n        // Data-binding with auto-update\n        this._negotiationList = new Bind(new NegotiationList,\n            new NegotiationView($('#negotiationView')),\n            'add', 'empty', 'order', 'reverse');\n\n        // Unidirectional data-binding\n        // this._message = ProxyFactory.create(new Message(),\n        //     ['text'],\n        //     model => this._messageView.update(model));\n        // this._messageView.update(this._message);\n        // this._messageView = new MessageView($('#messageView'));\n\n        // Data-binding with auto-update\n        this._message = new Bind(new Message(),\n        new MessageView($('#messageView')),\n            'text');\n\n        // Importing negotiationService\n        this._service = new NegotiationService();\n\n        this._init();\n    }\n\n    _init() {\n        ConnectionFactory\n            .getConnection()\n            .then(connection => new NegotiationDAO(connection))\n            .then(negotiationDAO => negotiationDAO.listAll())\n            .then(negotiations => \n                negotiations.forEach(negotiation =>\n                    this._negotiationList.add(negotiation)))\n            .catch(err => {\n                console.error(err);\n                this._message.text = err;\n            });\n\n        setInterval(() => {\n            this.import();\n        }, 3000);\n    }\n\n    add(event) {\n        \n        event.preventDefault();\n        \n        let negotiation = this._createNegotiation();\n        new NegotiationService()\n            .add(negotiation)\n            .then(message => {\n                // Add negotiation to list\n                this._negotiationList.add(negotiation);\n                this._message.text = 'Negociação adicionada com sucesso!';\n        \n                // Commented with factory proxy pattern use\n                // this._messageView.update(this._message);\n        \n                this._clearForm();\n            })\n            .catch(err => this._message.text = err);\n\n    }\n\n    import() {\n        \n        this._service\n            .import(this._negotiationList.negotiations)\n            .then(negotiations => {\n                negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n                this._message.text = 'Negociações do período importadas com sucesso';\n            })\n            .catch(err => this._message.text = err);  \n\n        // PROMISE PATTERN WITH ASYNC SEQUENCE AND FLAT ARRAY\n        // Promise.all([\n        //     service.getWeeklyNegotiations(),\n        //     service.getLastWeekNegotiations(),\n        //     service.getLastTwoWeekNegotiations()\n        // ]).then(negotiations => {\n        //     negotiations\n        //         // Flatten an array of arrays into one\n        //         .reduce((flatArray, fullArray) => flatArray.concat(fullArray), [])\n        //         .forEach(negotiation => this._negotiationList.add(negotiation));\n        //     this._message.text = 'Negociações da semana obtidas com sucesso!';\n        // }).catch(err => this._message.text = err);\n\n        // PROMISE PATTERN WITHOUT ASYNC SEQUENCE\n        // service.getWeeklyNegotiations()\n        //     .then(negotiations => {\n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         this._message.text = 'Negociações da semana obtidas com sucesso!';\n        //     })\n        //     .catch(err => {\n        //         this._message.text = err;\n        //     });\n\n        // service.getLastWeekNegotiations()\n        //     .then(negotiations => {\n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         this._message.text = 'Negociações da semana passada obtidas com sucesso!';\n        //     })\n        //     .catch(err => {\n        //         this._message.text = err;\n        //     });\n        \n        // service.getLastTwoWeekNegotiations()\n        //     .then(negotiations => {\n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         this._message.text = 'Negociações da semana retrasada obtidas com sucesso!';\n        //     })\n        //     .catch(err => {\n        //         this._message.text = err;\n        //     });\n\n        // CALLBACK PATTERN, WITH CALLBACK HELL AND PYRAMID OF DOOM\n        // service.getWeeklyNegotiations((err, negotiations) => {\n        //     // Error-first pattern\n        //     if(err) {\n        //         this._message.text = err;\n        //         return;\n        //     }\n        //     negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //     service.getLastWeekNegotiations((err, negotiations) => {   \n        //         // Error-first pattern\n        //         if(err) {\n        //             this._message.text = err;\n        //             return;\n        //         }  \n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         service.getLastTwoWeekNegotiations((err, negotiations) => {  \n        //             // Error-first pattern\n        //             if(err) {\n        //                 this._message.text = err;\n        //                 return;\n        //             }\n        //             negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //             this._message.text = 'Negociações importadas com sucesso!';\n        //         });\n        //     });\n        // });\n\n    }\n\n    empty() {\n        this._service\n            .empty()\n            .then(message => {\n                this._negotiationList.empty();\n                this._message.text = message;\n                // Commented with factory proxy pattern use\n                // this._messageView.update(this._message);\n            })\n            .catch(err => this._message.text = err)\n    }\n\n    order(column) {\n        if(this._actualOrder == column) this._negotiationList.reverse();\n        else this._negotiationList.order((a,b) => a[column] - b[column]);\n        this._actualOrder = column;\n    }\n\n    _createNegotiation() {\n        return new Negotiation(\n            DateHelper.txt2date(this._inputDate.value),\n            parseInt(this._inputQuantity.value),\n            parseFloat(this._inputValue.value)\n        );\n    }\n\n    _clearForm() {\n        this._inputDate.value = \"\";\n        this._inputQuantity.value = 1;\n        this._inputValue.value = 0.0;\n\n        this._inputDate.focus();\n    }\n}"]}