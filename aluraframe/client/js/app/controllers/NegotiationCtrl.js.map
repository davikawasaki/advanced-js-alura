{"version":3,"sources":["../../app-es6/controllers/NegotiationCtrl.js"],"names":["currentInstance","negotiationCtrl","NegotiationList","Message","Negotiation","NegotiationView","MessageView","NegotiationService","DateHelper","Bind","ConnectionFactory","NegotiationDAO","NegotiationCtrl","$","document","querySelector","bind","_inputDate","_inputQuantity","_inputValue","_actualOrder","_negotiationList","_message","_service","_init","getConnection","then","connection","negotiationDAO","listAll","negotiations","forEach","add","negotiation","catch","console","error","err","text","setInterval","import","event","preventDefault","_createNegotiation","_clearForm","empty","message","column","reverse","order","a","b","txt2date","value","parseInt","parseFloat","focus"],"mappings":"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","file":"NegotiationCtrl.js","sourcesContent":["import {NegotiationList} from '../models/NegotiationList';\nimport {Message} from '../models/Message';\nimport {Negotiation} from '../models/Negotiation';\nimport {NegotiationView} from '../views/NegotiationView';\nimport {MessageView} from '../views/MessageView';\nimport {NegotiationService} from '../services/NegotiationService';\nimport {DateHelper} from '../helpers/DateHelper';\nimport {Bind} from '../helpers/Bind';\nimport {ConnectionFactory} from '../services/ConnectionFactory';\nimport {NegotiationDAO} from '../dao/NegotiationDAO';\n\nclass NegotiationCtrl {\n\n    constructor() {\n        // Maintain binding association with document to dollar sign\n        let $ = document.querySelector.bind(document);\n        this._inputDate = $('#data');\n        this._inputQuantity = $('#quantidade');\n        this._inputValue = $('#valor');\n        this._actualOrder = '';\n\n        // OBSERVER PATTERN\n        // @see: https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript\n        // Instance of negotiationList passing negotiationView update as anonymous fn\n        // Case 1. Passes this context as params (needs reflection)\n        // this._negotiationList = new NegotiationList(this, function(model) {\n        // Case 2. Passing just model as params (arrow function context is lexical, not dynamic)\n\n        /* this._negotiationList = new NegotiationList(model => \n            this._negotiationView.update(model)\n        ); */\n\n        // PROXY PATTERN\n        // @see: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n        // Encapsulates the real object to be manipulated. Acts like an interface between the real object and the rest of the code.\n        // It's possible to attach codes beside ones from models, which needs to be executed in updates.\n        /* let self = this;\n        this._negotiationList = new Proxy(new NegotiationList(), {\n            get(target, prop, receiver) {\n                // Alternative: intercepting methods\n                if(['add', 'empty'].includes(prop) && typeof(target[prop]) == typeof(Function)) {\n                    // Changing object function on proxy with a new function, letting the original one intact\n                    // Scope needs to be dynamic\n                    return function() {\n                        console.log(`Intercepting method ${prop}`);\n                        // Calling the original object method from target with arguments passed within his own scope\n                        // Arguments is a implicit variable with access to method args when the method is called\n                        Reflect.apply(target[prop], target, arguments);\n\n                        // Update view with controller scope and model, which is target\n                        // JS method execution order: first get method reference, then apply it with params\n                        self._negotiationView.update(target);\n                    }\n                }\n\n                // Return property value of target\n                return Reflect.get(target, prop, receiver);\n            }\n        }); */\n\n        // FACTORY PATTERN\n        // @see: http://robdodson.me/javascript-design-patterns-factory/\n        // Binding between model and view\n        \n        // Unidirectional data-binding\n        // this._negotiationList = ProxyFactory.create(new NegotiationList,\n        //     ['add', 'empty'],\n        //     model => this._negotiationView.update(model));\n        // this._negotiationView = new NegotiationView($('#negotiationView'));\n        // this._negotiationView.update(this._negotiationList);\n        \n        // Data-binding with auto-update\n        this._negotiationList = new Bind(new NegotiationList,\n            new NegotiationView($('#negotiationView')),\n            'add', 'empty', 'order', 'reverse');\n\n        // Unidirectional data-binding\n        // this._message = ProxyFactory.create(new Message(),\n        //     ['text'],\n        //     model => this._messageView.update(model));\n        // this._messageView.update(this._message);\n        // this._messageView = new MessageView($('#messageView'));\n\n        // Data-binding with auto-update\n        this._message = new Bind(new Message(),\n        new MessageView($('#messageView')),\n            'text');\n\n        // Importing negotiationService\n        this._service = new NegotiationService();\n\n        this._init();\n    }\n\n    _init() {\n        ConnectionFactory\n            .getConnection()\n            .then(connection => new NegotiationDAO(connection))\n            .then(negotiationDAO => negotiationDAO.listAll())\n            .then(negotiations => \n                negotiations.forEach(negotiation =>\n                    this._negotiationList.add(negotiation)))\n            .catch(err => {\n                console.error(err);\n                this._message.text = err;\n            });\n\n        setInterval(() => {\n            this.import();\n        }, 3000);\n    }\n\n    add(event) {\n        \n        event.preventDefault();\n        \n        let negotiation = this._createNegotiation();\n        new NegotiationService()\n            .add(negotiation)\n            .then(message => {\n                // Add negotiation to list\n                this._negotiationList.add(negotiation);\n                this._message.text = 'Negociação adicionada com sucesso!';\n        \n                // Commented with factory proxy pattern use\n                // this._messageView.update(this._message);\n        \n                this._clearForm();\n            })\n            .catch(err => this._message.text = err);\n\n    }\n\n    import() {\n        \n        this._service\n            .import(this._negotiationList.negotiations)\n            .then(negotiations => {\n                negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n                this._message.text = 'Negociações do período importadas com sucesso';\n            })\n            .catch(err => this._message.text = err);  \n\n        // PROMISE PATTERN WITH ASYNC SEQUENCE AND FLAT ARRAY\n        // Promise.all([\n        //     service.getWeeklyNegotiations(),\n        //     service.getLastWeekNegotiations(),\n        //     service.getLastTwoWeekNegotiations()\n        // ]).then(negotiations => {\n        //     negotiations\n        //         // Flatten an array of arrays into one\n        //         .reduce((flatArray, fullArray) => flatArray.concat(fullArray), [])\n        //         .forEach(negotiation => this._negotiationList.add(negotiation));\n        //     this._message.text = 'Negociações da semana obtidas com sucesso!';\n        // }).catch(err => this._message.text = err);\n\n        // PROMISE PATTERN WITHOUT ASYNC SEQUENCE\n        // service.getWeeklyNegotiations()\n        //     .then(negotiations => {\n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         this._message.text = 'Negociações da semana obtidas com sucesso!';\n        //     })\n        //     .catch(err => {\n        //         this._message.text = err;\n        //     });\n\n        // service.getLastWeekNegotiations()\n        //     .then(negotiations => {\n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         this._message.text = 'Negociações da semana passada obtidas com sucesso!';\n        //     })\n        //     .catch(err => {\n        //         this._message.text = err;\n        //     });\n        \n        // service.getLastTwoWeekNegotiations()\n        //     .then(negotiations => {\n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         this._message.text = 'Negociações da semana retrasada obtidas com sucesso!';\n        //     })\n        //     .catch(err => {\n        //         this._message.text = err;\n        //     });\n\n        // CALLBACK PATTERN, WITH CALLBACK HELL AND PYRAMID OF DOOM\n        // service.getWeeklyNegotiations((err, negotiations) => {\n        //     // Error-first pattern\n        //     if(err) {\n        //         this._message.text = err;\n        //         return;\n        //     }\n        //     negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //     service.getLastWeekNegotiations((err, negotiations) => {   \n        //         // Error-first pattern\n        //         if(err) {\n        //             this._message.text = err;\n        //             return;\n        //         }  \n        //         negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //         service.getLastTwoWeekNegotiations((err, negotiations) => {  \n        //             // Error-first pattern\n        //             if(err) {\n        //                 this._message.text = err;\n        //                 return;\n        //             }\n        //             negotiations.forEach(negotiation => this._negotiationList.add(negotiation));\n        //             this._message.text = 'Negociações importadas com sucesso!';\n        //         });\n        //     });\n        // });\n\n    }\n\n    empty() {\n        this._service\n            .empty()\n            .then(message => {\n                this._negotiationList.empty();\n                this._message.text = message;\n                // Commented with factory proxy pattern use\n                // this._messageView.update(this._message);\n            })\n            .catch(err => this._message.text = err)\n    }\n\n    order(column) {\n        if(this._actualOrder == column) this._negotiationList.reverse();\n        else this._negotiationList.order((a,b) => a[column] - b[column]);\n        this._actualOrder = column;\n    }\n\n    _createNegotiation() {\n        return new Negotiation(\n            DateHelper.txt2date(this._inputDate.value),\n            parseInt(this._inputQuantity.value),\n            parseFloat(this._inputValue.value)\n        );\n    }\n\n    _clearForm() {\n        this._inputDate.value = \"\";\n        this._inputQuantity.value = 1;\n        this._inputValue.value = 0.0;\n\n        this._inputDate.focus();\n    }\n}\n\nlet negotiationCtrl = new NegotiationCtrl();\n\nexport function currentInstance() {\n    return negotiationCtrl;\n}"]}