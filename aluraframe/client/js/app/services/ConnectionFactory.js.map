{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA;;AAEA,IAAIA,oBAAqB,YAAW;AAChC,QAAMC,SAAS,CAAC,cAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;;AAEI;AACA;AACA;AACA;AACA;;AAEA,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAVL;AAAA;AAAA,4CAY2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;AACAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAFD;AAGAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACA;AACA;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAXD;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,KAAR,CAAcP,EAAEC,MAAF,CAASM,KAAvB;AACAd,+BAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAIH,iBArBM,CAAP;AAsBH;AAnCL;AAAA;AAAA,0CAqCyBpB,UArCzB,EAqCqC;AAC7BH,uBAAOwB,OAAP,CAAe,iBAAS;AACpB,wBAAGrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDxB,WAAWyB,iBAAX,CAA6BD,KAA7B;AAChDxB,+BAAW0B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAHD;AAIH;AA1CL;AAAA;AAAA,8CA4C6B;AACrB,oBAAG3B,UAAH,EAAe;AACXC;AACA;AACA;AACAD,iCAAa,IAAb;AACH;AACJ;AAnDL;;AAAA;AAAA;AAsDH,CA9DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["// MODULE PATTERN WITH AUTO INVOKABLE FUNCTION\n// @see: https://medium.com/@tkssharma/javascript-module-pattern-b4b5012ada9f\n\nvar ConnectionFactory = (function() {\n    const stores = ['negotiations'];\n    const version = 1;\n    const dbName = 'aluraframe';\n    \n    var connection = null;\n    var close = null;\n    \n    return class ConnectionFactory {\n    \n        // ConnectionFactory with only one accessible connection as a static method\n        // 1. getConnection must be a static method\n        // 2. getConnection must return a promise\n        // 3. connection gotta be the same no matter how many times the static method is called\n        // 4. connection can't be closed directly, which means it can only happens through connectionFactory\n    \n        constructor() {\n            throw new Error('Não é possível criar instâncias de ConnectionFactory!');\n        }\n    \n        static getConnection() {\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbName, version);\n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._createStores(e.target.result);\n                };\n                openRequest.onsuccess = e => {\n                    if(!connection) {\n                        connection = e.target.result;\n                        // Monkey-patching: changing API logic\n                        // @see: http://me.dt.in.th/page/JavaScript-override/\n                        close = connection.close.bind(connection);   \n                        connection.close = function() {\n                            throw new Error('Você não pode fechar diretamente a conexão!');\n                        }\n                    }\n                    resolve(connection);\n                };\n                openRequest.onerror = e => {\n                    console.error(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n        \n        static _createStores(connection) {\n            stores.forEach(store => {\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n                connection.createObjectStore(store, {autoIncrement: true});\n            });\n        }\n\n        static closeConnection() {\n            if(connection) {\n                close();\n                // Option without bind on monkey-patch\n                // Reflect.apply(close, connection, []);\n                connection = null;\n            }\n        }\n    \n    }\n})();\n"]}