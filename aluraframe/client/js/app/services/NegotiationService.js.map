{"version":3,"sources":["../../app-es6/services/NegotiationService.js"],"names":["HttpService","ConnectionFactory","NegotiationDAO","Negotiation","NegotiationService","_http","get","then","negotiations","map","Date","obj","data","quantidade","valor","catch","console","log","err","Error","Promise","all","getWeeklyNegotiations","getLastWeekNegotiations","getLastTwoWeekNegotiations","periods","reduce","period","concat","negotiation","getConnection","connection","negotiationDAO","add","deleteAll","error","actualList","getAllNegotiations","filter","some","isEqual","negotiationFromList"],"mappings":"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","file":"NegotiationService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegotiationDAO} from '../dao/NegotiationDAO';\nimport {Negotiation} from '../models/Negotiation';\n\nexport class NegotiationService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    // CALLBACK PATTERN FOR ASYNC REQUESTS\n    // @see: http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/\n    // getWeeklyNegotiations(cb) {\n    //     let xhr = new XMLHttpRequest();\n    //     xhr.open('GET', 'negociacoes/semana');\n    //     xhr.onreadystatechange = () => {\n    //         if(xhr.readyState == 4) {\n    //             if(xhr.status == 200) {\n    //                 console.log('Getting negotiations from server');\n    //                 cb(null, JSON.parse(xhr.responseText)\n    //                     .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor)));\n    //             } else {\n    //                 console.log(xhr.responseText);\n    //                 cb('Não foi possível obter as negociações da semana!');\n    //             }\n    //         }\n    //     }\n    //     xhr.send();\n    // }\n\n    // PROMISE PATTERN FOR ASYNC REQUESTS WITH HTTP SERVICE\n    // @see: https://developers.google.com/web/fundamentals/primers/promises\n    getWeeklyNegotiations() {\n        return this._http\n            .get('negociacoes/semana')\n            .then(negotiations => {\n                return negotiations\n                    .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor));\n            })\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possível obter as negociações da semana!');\n            });\n    }\n\n    getLastWeekNegotiations() {\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negotiations => {\n                return negotiations\n                    .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor));\n            })\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possível obter as negociações da semana anterior!');\n            });\n    }\n\n    getLastTwoWeekNegotiations() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negotiations => {\n                return negotiations\n                    .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor));\n            })\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possível obter as negociações da semana retrasada!');\n            });\n    }\n\n    getAllNegotiations() {\n        return Promise.all([\n            this.getWeeklyNegotiations(),\n            this.getLastWeekNegotiations(),\n            this.getLastTwoWeekNegotiations()\n        ]).then(periods => {\n            let negotiations = periods\n                .reduce((data, period) => data.concat(period), []);\n            return negotiations;\n        }).catch(err => {\n            throw new Error(err);\n        });\n    }\n\n    add(negotiation) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegotiationDAO(connection))\n            .then(negotiationDAO => negotiationDAO.add(negotiation))\n            .then(() => 'Negociação adicionada com sucesso!')\n            .catch(() => {\n                throw new Error('Não foi possível adicionar a negociação!')\n            });\n\n        // Since promise pattern has a catch, try/catch is not needed anymore\n        // try {\n        // } catch(err) {\n        //     this._message.text = err;\n        // }\n    }\n\n    empty() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegotiationDAO(connection))\n            .then(negotiationDAO => negotiationDAO.deleteAll())\n            .then(() => 'Negociações apagadas com sucesso!')\n            .catch(err => {\n                console.error(err);\n                throw new Error('Não foi possível apagar as negociações!');\n            })\n    }\n\n    import(actualList) {\n        // PROMISE PATTERN WITH ALL NEGOTIATIONS ENCAPSULATED\n        return this.getAllNegotiations()\n            // Check if each negotiation was already imported, filtering those who are already there\n            .then(negotiations => \n                negotiations.filter(negotiation => \n                    !actualList.some(negotiationFromList => \n                        negotiation.isEqual(negotiationFromList)))\n            )\n            .catch(err => {\n                console.error(err);\n                throw new Error('Não foi possível buscar negociações para importar!');\n            })\n    }\n\n}"]}