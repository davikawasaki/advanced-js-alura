{"version":3,"sources":["../../app-es6/services/NegotiationService.js"],"names":["NegotiationService","_http","HttpService","get","then","negotiations","map","Negotiation","Date","obj","data","quantidade","valor","catch","console","log","err","Error","Promise","all","getWeeklyNegotiations","getLastWeekNegotiations","getLastTwoWeekNegotiations","periods","reduce","period","concat","negotiation","ConnectionFactory","getConnection","NegotiationDAO","connection","negotiationDAO","add","deleteAll","error","actualList","getAllNegotiations","filter","some","isEqual","negotiationFromList"],"mappings":"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","file":"NegotiationService.js","sourcesContent":["class NegotiationService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    // CALLBACK PATTERN FOR ASYNC REQUESTS\n    // @see: http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/\n    // getWeeklyNegotiations(cb) {\n    //     let xhr = new XMLHttpRequest();\n    //     xhr.open('GET', 'negociacoes/semana');\n    //     xhr.onreadystatechange = () => {\n    //         if(xhr.readyState == 4) {\n    //             if(xhr.status == 200) {\n    //                 console.log('Getting negotiations from server');\n    //                 cb(null, JSON.parse(xhr.responseText)\n    //                     .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor)));\n    //             } else {\n    //                 console.log(xhr.responseText);\n    //                 cb('Não foi possível obter as negociações da semana!');\n    //             }\n    //         }\n    //     }\n    //     xhr.send();\n    // }\n\n    // PROMISE PATTERN FOR ASYNC REQUESTS WITH HTTP SERVICE\n    // @see: https://developers.google.com/web/fundamentals/primers/promises\n    getWeeklyNegotiations() {\n        return this._http\n            .get('negociacoes/semana')\n            .then(negotiations => {\n                return negotiations\n                    .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor));\n            })\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possível obter as negociações da semana!');\n            });\n    }\n\n    getLastWeekNegotiations() {\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negotiations => {\n                return negotiations\n                    .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor));\n            })\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possível obter as negociações da semana anterior!');\n            });\n    }\n\n    getLastTwoWeekNegotiations() {\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negotiations => {\n                return negotiations\n                    .map(obj => new Negotiation(new Date(obj.data), obj.quantidade, obj.valor));\n            })\n            .catch(err => {\n                console.log(err);\n                throw new Error('Não foi possível obter as negociações da semana retrasada!');\n            });\n    }\n\n    getAllNegotiations() {\n        return Promise.all([\n            this.getWeeklyNegotiations(),\n            this.getLastWeekNegotiations(),\n            this.getLastTwoWeekNegotiations()\n        ]).then(periods => {\n            let negotiations = periods\n                .reduce((data, period) => data.concat(period), []);\n            return negotiations;\n        }).catch(err => {\n            throw new Error(err);\n        });\n    }\n\n    add(negotiation) {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegotiationDAO(connection))\n            .then(negotiationDAO => negotiationDAO.add(negotiation))\n            .then(() => 'Negociação adicionada com sucesso!')\n            .catch(() => {\n                throw new Error('Não foi possível adicionar a negociação!')\n            });\n\n        // Since promise pattern has a catch, try/catch is not needed anymore\n        // try {\n        // } catch(err) {\n        //     this._message.text = err;\n        // }\n    }\n\n    empty() {\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegotiationDAO(connection))\n            .then(negotiationDAO => negotiationDAO.deleteAll())\n            .then(() => 'Negociações apagadas com sucesso!')\n            .catch(err => {\n                console.error(err);\n                throw new Error('Não foi possível apagar as negociações!');\n            })\n    }\n\n    import(actualList) {\n        // PROMISE PATTERN WITH ALL NEGOTIATIONS ENCAPSULATED\n        return this.getAllNegotiations()\n            // Check if each negotiation was already imported, filtering those who are already there\n            .then(negotiations => \n                negotiations.filter(negotiation => \n                    !actualList.some(negotiationFromList => \n                        negotiation.isEqual(negotiationFromList)))\n            )\n            .catch(err => {\n                console.error(err);\n                throw new Error('Não foi possível buscar negociações para importar!');\n            })\n    }\n\n}"]}